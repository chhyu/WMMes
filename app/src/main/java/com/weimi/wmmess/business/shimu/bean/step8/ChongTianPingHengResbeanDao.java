package com.weimi.wmmess.business.shimu.bean.step8;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.weimi.wmmess.business.shimu.bean.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHONG_TIAN_PING_HENG_RESBEAN".
*/
public class ChongTianPingHengResbeanDao extends AbstractDao<ChongTianPingHengResbean, Long> {

    public static final String TABLENAME = "CHONG_TIAN_PING_HENG_RESBEAN";

    /**
     * Properties of entity ChongTianPingHengResbean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ChongTianResbeanId = new Property(1, Long.class, "chongTianResbeanId", false, "chongTianResbeanId");
        public final static Property XueHao = new Property(2, String.class, "xueHao", false, "XUE_HAO");
        public final static Property One = new Property(3, String.class, "one", false, "ONE");
        public final static Property Two = new Property(4, String.class, "two", false, "TWO");
        public final static Property Three = new Property(5, String.class, "three", false, "THREE");
        public final static Property Four = new Property(6, String.class, "four", false, "FOUR");
        public final static Property Five = new Property(7, String.class, "five", false, "FIVE");
        public final static Property Six = new Property(8, String.class, "six", false, "SIX");
        public final static Property Min = new Property(9, String.class, "min", false, "MIN");
        public final static Property Max = new Property(10, String.class, "max", false, "MAX");
        public final static Property AverageValue = new Property(11, String.class, "averageValue", false, "AVERAGE_VALUE");
    }

    private Query<ChongTianPingHengResbean> step8Resbean_ChongTianPingHengResbeansQuery;

    public ChongTianPingHengResbeanDao(DaoConfig config) {
        super(config);
    }
    
    public ChongTianPingHengResbeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHONG_TIAN_PING_HENG_RESBEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"chongTianResbeanId\" INTEGER," + // 1: chongTianResbeanId
                "\"XUE_HAO\" TEXT," + // 2: xueHao
                "\"ONE\" TEXT," + // 3: one
                "\"TWO\" TEXT," + // 4: two
                "\"THREE\" TEXT," + // 5: three
                "\"FOUR\" TEXT," + // 6: four
                "\"FIVE\" TEXT," + // 7: five
                "\"SIX\" TEXT," + // 8: six
                "\"MIN\" TEXT," + // 9: min
                "\"MAX\" TEXT," + // 10: max
                "\"AVERAGE_VALUE\" TEXT);"); // 11: averageValue
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHONG_TIAN_PING_HENG_RESBEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChongTianPingHengResbean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long chongTianResbeanId = entity.getChongTianResbeanId();
        if (chongTianResbeanId != null) {
            stmt.bindLong(2, chongTianResbeanId);
        }
 
        String xueHao = entity.getXueHao();
        if (xueHao != null) {
            stmt.bindString(3, xueHao);
        }
 
        String one = entity.getOne();
        if (one != null) {
            stmt.bindString(4, one);
        }
 
        String two = entity.getTwo();
        if (two != null) {
            stmt.bindString(5, two);
        }
 
        String three = entity.getThree();
        if (three != null) {
            stmt.bindString(6, three);
        }
 
        String four = entity.getFour();
        if (four != null) {
            stmt.bindString(7, four);
        }
 
        String five = entity.getFive();
        if (five != null) {
            stmt.bindString(8, five);
        }
 
        String six = entity.getSix();
        if (six != null) {
            stmt.bindString(9, six);
        }
 
        String min = entity.getMin();
        if (min != null) {
            stmt.bindString(10, min);
        }
 
        String max = entity.getMax();
        if (max != null) {
            stmt.bindString(11, max);
        }
 
        String averageValue = entity.getAverageValue();
        if (averageValue != null) {
            stmt.bindString(12, averageValue);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChongTianPingHengResbean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long chongTianResbeanId = entity.getChongTianResbeanId();
        if (chongTianResbeanId != null) {
            stmt.bindLong(2, chongTianResbeanId);
        }
 
        String xueHao = entity.getXueHao();
        if (xueHao != null) {
            stmt.bindString(3, xueHao);
        }
 
        String one = entity.getOne();
        if (one != null) {
            stmt.bindString(4, one);
        }
 
        String two = entity.getTwo();
        if (two != null) {
            stmt.bindString(5, two);
        }
 
        String three = entity.getThree();
        if (three != null) {
            stmt.bindString(6, three);
        }
 
        String four = entity.getFour();
        if (four != null) {
            stmt.bindString(7, four);
        }
 
        String five = entity.getFive();
        if (five != null) {
            stmt.bindString(8, five);
        }
 
        String six = entity.getSix();
        if (six != null) {
            stmt.bindString(9, six);
        }
 
        String min = entity.getMin();
        if (min != null) {
            stmt.bindString(10, min);
        }
 
        String max = entity.getMax();
        if (max != null) {
            stmt.bindString(11, max);
        }
 
        String averageValue = entity.getAverageValue();
        if (averageValue != null) {
            stmt.bindString(12, averageValue);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChongTianPingHengResbean readEntity(Cursor cursor, int offset) {
        ChongTianPingHengResbean entity = new ChongTianPingHengResbean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // chongTianResbeanId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // xueHao
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // one
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // two
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // three
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // four
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // five
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // six
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // min
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // max
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // averageValue
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChongTianPingHengResbean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setChongTianResbeanId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setXueHao(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOne(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTwo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setThree(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFour(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFive(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSix(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMin(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMax(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAverageValue(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChongTianPingHengResbean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChongTianPingHengResbean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChongTianPingHengResbean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "chongTianPingHengResbeans" to-many relationship of Step8Resbean. */
    public List<ChongTianPingHengResbean> _queryStep8Resbean_ChongTianPingHengResbeans(Long chongTianResbeanId) {
        synchronized (this) {
            if (step8Resbean_ChongTianPingHengResbeansQuery == null) {
                QueryBuilder<ChongTianPingHengResbean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ChongTianResbeanId.eq(null));
                step8Resbean_ChongTianPingHengResbeansQuery = queryBuilder.build();
            }
        }
        Query<ChongTianPingHengResbean> query = step8Resbean_ChongTianPingHengResbeansQuery.forCurrentThread();
        query.setParameter(0, chongTianResbeanId);
        return query.list();
    }

}
