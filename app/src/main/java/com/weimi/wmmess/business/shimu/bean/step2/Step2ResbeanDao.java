package com.weimi.wmmess.business.shimu.bean.step2;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.weimi.wmmess.business.shimu.bean.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STEP2_RESBEAN".
*/
public class Step2ResbeanDao extends AbstractDao<Step2Resbean, Long> {

    public static final String TABLENAME = "STEP2_RESBEAN";

    /**
     * Properties of entity Step2Resbean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Step2Id = new Property(0, Long.class, "step2Id", true, "_id");
        public final static Property CurrentStepIsChecked = new Property(1, boolean.class, "currentStepIsChecked", false, "CURRENT_STEP_IS_CHECKED");
        public final static Property A = new Property(2, int.class, "a", false, "A");
        public final static Property B = new Property(3, int.class, "b", false, "B");
        public final static Property C = new Property(4, int.class, "c", false, "C");
        public final static Property D = new Property(5, int.class, "d", false, "D");
        public final static Property E = new Property(6, int.class, "e", false, "E");
        public final static Property F = new Property(7, int.class, "f", false, "F");
        public final static Property G = new Property(8, int.class, "g", false, "G");
        public final static Property H = new Property(9, int.class, "h", false, "H");
        public final static Property I = new Property(10, int.class, "i", false, "I");
        public final static Property J = new Property(11, int.class, "j", false, "J");
        public final static Property K = new Property(12, int.class, "k", false, "K");
        public final static Property L = new Property(13, int.class, "l", false, "L");
        public final static Property M = new Property(14, int.class, "m", false, "M");
        public final static Property N = new Property(15, int.class, "n", false, "N");
        public final static Property O = new Property(16, int.class, "o", false, "O");
    }


    public Step2ResbeanDao(DaoConfig config) {
        super(config);
    }
    
    public Step2ResbeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STEP2_RESBEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: step2Id
                "\"CURRENT_STEP_IS_CHECKED\" INTEGER NOT NULL ," + // 1: currentStepIsChecked
                "\"A\" INTEGER NOT NULL ," + // 2: a
                "\"B\" INTEGER NOT NULL ," + // 3: b
                "\"C\" INTEGER NOT NULL ," + // 4: c
                "\"D\" INTEGER NOT NULL ," + // 5: d
                "\"E\" INTEGER NOT NULL ," + // 6: e
                "\"F\" INTEGER NOT NULL ," + // 7: f
                "\"G\" INTEGER NOT NULL ," + // 8: g
                "\"H\" INTEGER NOT NULL ," + // 9: h
                "\"I\" INTEGER NOT NULL ," + // 10: i
                "\"J\" INTEGER NOT NULL ," + // 11: j
                "\"K\" INTEGER NOT NULL ," + // 12: k
                "\"L\" INTEGER NOT NULL ," + // 13: l
                "\"M\" INTEGER NOT NULL ," + // 14: m
                "\"N\" INTEGER NOT NULL ," + // 15: n
                "\"O\" INTEGER NOT NULL );"); // 16: o
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STEP2_RESBEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Step2Resbean entity) {
        stmt.clearBindings();
 
        Long step2Id = entity.getStep2Id();
        if (step2Id != null) {
            stmt.bindLong(1, step2Id);
        }
        stmt.bindLong(2, entity.getCurrentStepIsChecked() ? 1L: 0L);
        stmt.bindLong(3, entity.getA());
        stmt.bindLong(4, entity.getB());
        stmt.bindLong(5, entity.getC());
        stmt.bindLong(6, entity.getD());
        stmt.bindLong(7, entity.getE());
        stmt.bindLong(8, entity.getF());
        stmt.bindLong(9, entity.getG());
        stmt.bindLong(10, entity.getH());
        stmt.bindLong(11, entity.getI());
        stmt.bindLong(12, entity.getJ());
        stmt.bindLong(13, entity.getK());
        stmt.bindLong(14, entity.getL());
        stmt.bindLong(15, entity.getM());
        stmt.bindLong(16, entity.getN());
        stmt.bindLong(17, entity.getO());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Step2Resbean entity) {
        stmt.clearBindings();
 
        Long step2Id = entity.getStep2Id();
        if (step2Id != null) {
            stmt.bindLong(1, step2Id);
        }
        stmt.bindLong(2, entity.getCurrentStepIsChecked() ? 1L: 0L);
        stmt.bindLong(3, entity.getA());
        stmt.bindLong(4, entity.getB());
        stmt.bindLong(5, entity.getC());
        stmt.bindLong(6, entity.getD());
        stmt.bindLong(7, entity.getE());
        stmt.bindLong(8, entity.getF());
        stmt.bindLong(9, entity.getG());
        stmt.bindLong(10, entity.getH());
        stmt.bindLong(11, entity.getI());
        stmt.bindLong(12, entity.getJ());
        stmt.bindLong(13, entity.getK());
        stmt.bindLong(14, entity.getL());
        stmt.bindLong(15, entity.getM());
        stmt.bindLong(16, entity.getN());
        stmt.bindLong(17, entity.getO());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Step2Resbean readEntity(Cursor cursor, int offset) {
        Step2Resbean entity = new Step2Resbean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // step2Id
            cursor.getShort(offset + 1) != 0, // currentStepIsChecked
            cursor.getInt(offset + 2), // a
            cursor.getInt(offset + 3), // b
            cursor.getInt(offset + 4), // c
            cursor.getInt(offset + 5), // d
            cursor.getInt(offset + 6), // e
            cursor.getInt(offset + 7), // f
            cursor.getInt(offset + 8), // g
            cursor.getInt(offset + 9), // h
            cursor.getInt(offset + 10), // i
            cursor.getInt(offset + 11), // j
            cursor.getInt(offset + 12), // k
            cursor.getInt(offset + 13), // l
            cursor.getInt(offset + 14), // m
            cursor.getInt(offset + 15), // n
            cursor.getInt(offset + 16) // o
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Step2Resbean entity, int offset) {
        entity.setStep2Id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCurrentStepIsChecked(cursor.getShort(offset + 1) != 0);
        entity.setA(cursor.getInt(offset + 2));
        entity.setB(cursor.getInt(offset + 3));
        entity.setC(cursor.getInt(offset + 4));
        entity.setD(cursor.getInt(offset + 5));
        entity.setE(cursor.getInt(offset + 6));
        entity.setF(cursor.getInt(offset + 7));
        entity.setG(cursor.getInt(offset + 8));
        entity.setH(cursor.getInt(offset + 9));
        entity.setI(cursor.getInt(offset + 10));
        entity.setJ(cursor.getInt(offset + 11));
        entity.setK(cursor.getInt(offset + 12));
        entity.setL(cursor.getInt(offset + 13));
        entity.setM(cursor.getInt(offset + 14));
        entity.setN(cursor.getInt(offset + 15));
        entity.setO(cursor.getInt(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Step2Resbean entity, long rowId) {
        entity.setStep2Id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Step2Resbean entity) {
        if(entity != null) {
            return entity.getStep2Id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Step2Resbean entity) {
        return entity.getStep2Id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
