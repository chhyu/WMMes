package com.weimi.wmmess.business.shimu.bean.step10;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.weimi.wmmess.business.shimu.bean.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STEP10_RESBEAN".
*/
public class Step10ResbeanDao extends AbstractDao<Step10Resbean, Long> {

    public static final String TABLENAME = "STEP10_RESBEAN";

    /**
     * Properties of entity Step10Resbean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Step10Id = new Property(0, Long.class, "step10Id", true, "_id");
        public final static Property CurrentStepIsChecked = new Property(1, boolean.class, "currentStepIsChecked", false, "CURRENT_STEP_IS_CHECKED");
        public final static Property ConfirmTime = new Property(2, String.class, "confirmTime", false, "CONFIRM_TIME");
    }

    private DaoSession daoSession;


    public Step10ResbeanDao(DaoConfig config) {
        super(config);
    }
    
    public Step10ResbeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STEP10_RESBEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: step10Id
                "\"CURRENT_STEP_IS_CHECKED\" INTEGER NOT NULL ," + // 1: currentStepIsChecked
                "\"CONFIRM_TIME\" TEXT);"); // 2: confirmTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STEP10_RESBEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Step10Resbean entity) {
        stmt.clearBindings();
 
        Long step10Id = entity.getStep10Id();
        if (step10Id != null) {
            stmt.bindLong(1, step10Id);
        }
        stmt.bindLong(2, entity.getCurrentStepIsChecked() ? 1L: 0L);
 
        String confirmTime = entity.getConfirmTime();
        if (confirmTime != null) {
            stmt.bindString(3, confirmTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Step10Resbean entity) {
        stmt.clearBindings();
 
        Long step10Id = entity.getStep10Id();
        if (step10Id != null) {
            stmt.bindLong(1, step10Id);
        }
        stmt.bindLong(2, entity.getCurrentStepIsChecked() ? 1L: 0L);
 
        String confirmTime = entity.getConfirmTime();
        if (confirmTime != null) {
            stmt.bindString(3, confirmTime);
        }
    }

    @Override
    protected final void attachEntity(Step10Resbean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Step10Resbean readEntity(Cursor cursor, int offset) {
        Step10Resbean entity = new Step10Resbean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // step10Id
            cursor.getShort(offset + 1) != 0, // currentStepIsChecked
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // confirmTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Step10Resbean entity, int offset) {
        entity.setStep10Id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCurrentStepIsChecked(cursor.getShort(offset + 1) != 0);
        entity.setConfirmTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Step10Resbean entity, long rowId) {
        entity.setStep10Id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Step10Resbean entity) {
        if(entity != null) {
            return entity.getStep10Id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Step10Resbean entity) {
        return entity.getStep10Id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
