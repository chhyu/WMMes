package com.weimi.wmmess.business.shimu.bean.step7;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.weimi.wmmess.business.shimu.bean.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STEP7_RESBEAN".
*/
public class Step7ResbeanDao extends AbstractDao<Step7Resbean, Long> {

    public static final String TABLENAME = "STEP7_RESBEAN";

    /**
     * Properties of entity Step7Resbean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Step7Id = new Property(0, Long.class, "step7Id", true, "_id");
        public final static Property CurrentStepIsChecked = new Property(1, boolean.class, "currentStepIsChecked", false, "CURRENT_STEP_IS_CHECKED");
        public final static Property ZuijiaShijian = new Property(2, String.class, "zuijiaShijian", false, "ZUIJIA_SHIJIAN");
        public final static Property ZuijiaSuDu = new Property(3, String.class, "zuijiaSuDu", false, "ZUIJIA_SU_DU");
    }

    private DaoSession daoSession;


    public Step7ResbeanDao(DaoConfig config) {
        super(config);
    }
    
    public Step7ResbeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STEP7_RESBEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: step7Id
                "\"CURRENT_STEP_IS_CHECKED\" INTEGER NOT NULL ," + // 1: currentStepIsChecked
                "\"ZUIJIA_SHIJIAN\" TEXT NOT NULL ," + // 2: zuijiaShijian
                "\"ZUIJIA_SU_DU\" TEXT NOT NULL );"); // 3: zuijiaSuDu
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STEP7_RESBEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Step7Resbean entity) {
        stmt.clearBindings();
 
        Long step7Id = entity.getStep7Id();
        if (step7Id != null) {
            stmt.bindLong(1, step7Id);
        }
        stmt.bindLong(2, entity.getCurrentStepIsChecked() ? 1L: 0L);
        stmt.bindString(3, entity.getZuijiaShijian());
        stmt.bindString(4, entity.getZuijiaSuDu());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Step7Resbean entity) {
        stmt.clearBindings();
 
        Long step7Id = entity.getStep7Id();
        if (step7Id != null) {
            stmt.bindLong(1, step7Id);
        }
        stmt.bindLong(2, entity.getCurrentStepIsChecked() ? 1L: 0L);
        stmt.bindString(3, entity.getZuijiaShijian());
        stmt.bindString(4, entity.getZuijiaSuDu());
    }

    @Override
    protected final void attachEntity(Step7Resbean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Step7Resbean readEntity(Cursor cursor, int offset) {
        Step7Resbean entity = new Step7Resbean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // step7Id
            cursor.getShort(offset + 1) != 0, // currentStepIsChecked
            cursor.getString(offset + 2), // zuijiaShijian
            cursor.getString(offset + 3) // zuijiaSuDu
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Step7Resbean entity, int offset) {
        entity.setStep7Id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCurrentStepIsChecked(cursor.getShort(offset + 1) != 0);
        entity.setZuijiaShijian(cursor.getString(offset + 2));
        entity.setZuijiaSuDu(cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Step7Resbean entity, long rowId) {
        entity.setStep7Id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Step7Resbean entity) {
        if(entity != null) {
            return entity.getStep7Id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Step7Resbean entity) {
        return entity.getStep7Id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
