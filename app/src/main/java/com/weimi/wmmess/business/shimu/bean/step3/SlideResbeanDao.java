package com.weimi.wmmess.business.shimu.bean.step3;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.weimi.wmmess.business.shimu.bean.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SLIDE_RESBEAN".
*/
public class SlideResbeanDao extends AbstractDao<SlideResbean, Long> {

    public static final String TABLENAME = "SLIDE_RESBEAN";

    /**
     * Properties of entity SlideResbean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SlideResbeanId = new Property(1, Long.class, "slideResbeanId", false, "slideResbeanId");
        public final static Property Index = new Property(2, int.class, "index", false, "INDEX");
        public final static Property Record = new Property(3, String.class, "record", false, "RECORD");
    }

    private Query<SlideResbean> step3MuResBean_SlideResbeanListQuery;

    public SlideResbeanDao(DaoConfig config) {
        super(config);
    }
    
    public SlideResbeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SLIDE_RESBEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"slideResbeanId\" INTEGER," + // 1: slideResbeanId
                "\"INDEX\" INTEGER NOT NULL ," + // 2: index
                "\"RECORD\" TEXT);"); // 3: record
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SLIDE_RESBEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SlideResbean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long slideResbeanId = entity.getSlideResbeanId();
        if (slideResbeanId != null) {
            stmt.bindLong(2, slideResbeanId);
        }
        stmt.bindLong(3, entity.getIndex());
 
        String record = entity.getRecord();
        if (record != null) {
            stmt.bindString(4, record);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SlideResbean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long slideResbeanId = entity.getSlideResbeanId();
        if (slideResbeanId != null) {
            stmt.bindLong(2, slideResbeanId);
        }
        stmt.bindLong(3, entity.getIndex());
 
        String record = entity.getRecord();
        if (record != null) {
            stmt.bindString(4, record);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SlideResbean readEntity(Cursor cursor, int offset) {
        SlideResbean entity = new SlideResbean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // slideResbeanId
            cursor.getInt(offset + 2), // index
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // record
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SlideResbean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSlideResbeanId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setIndex(cursor.getInt(offset + 2));
        entity.setRecord(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SlideResbean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SlideResbean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SlideResbean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "slideResbeanList" to-many relationship of Step3MuResBean. */
    public List<SlideResbean> _queryStep3MuResBean_SlideResbeanList(Long slideResbeanId) {
        synchronized (this) {
            if (step3MuResBean_SlideResbeanListQuery == null) {
                QueryBuilder<SlideResbean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.SlideResbeanId.eq(null));
                step3MuResBean_SlideResbeanListQuery = queryBuilder.build();
            }
        }
        Query<SlideResbean> query = step3MuResBean_SlideResbeanListQuery.forCurrentThread();
        query.setParameter(0, slideResbeanId);
        return query.list();
    }

}
