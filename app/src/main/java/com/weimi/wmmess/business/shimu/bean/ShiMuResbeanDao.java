package com.weimi.wmmess.business.shimu.bean;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.weimi.wmmess.business.shimu.bean.problem.ProblemResbean;
import com.weimi.wmmess.business.shimu.bean.step1.Step1Resbean;
import com.weimi.wmmess.business.shimu.bean.step10.Step10Resbean;
import com.weimi.wmmess.business.shimu.bean.step11.Step11Resbean;
import com.weimi.wmmess.business.shimu.bean.step12.Step12ResBean;
import com.weimi.wmmess.business.shimu.bean.step13.Step13Resbean;
import com.weimi.wmmess.business.shimu.bean.step2.Step2Resbean;
import com.weimi.wmmess.business.shimu.bean.step3.Step3MuResBean;
import com.weimi.wmmess.business.shimu.bean.step4.Step4Resbean;
import com.weimi.wmmess.business.shimu.bean.step5.Step5Resbean;
import com.weimi.wmmess.business.shimu.bean.step6.Step6Resbean;
import com.weimi.wmmess.business.shimu.bean.step7.Step7Resbean;
import com.weimi.wmmess.business.shimu.bean.step8.Step8Resbean;
import com.weimi.wmmess.business.shimu.bean.step9.Step9Resbean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHI_MU_RESBEAN".
*/
public class ShiMuResbeanDao extends AbstractDao<ShiMuResbean, Long> {

    public static final String TABLENAME = "SHI_MU_RESBEAN";

    /**
     * Properties of entity ShiMuResbean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CurrentTime = new Property(1, String.class, "currentTime", false, "CURRENT_TIME");
        public final static Property IsComplete = new Property(2, boolean.class, "isComplete", false, "IS_COMPLETE");
        public final static Property Step1Id = new Property(3, Long.class, "step1Id", false, "STEP1_ID");
        public final static Property Step2Id = new Property(4, Long.class, "step2Id", false, "STEP2_ID");
        public final static Property Step3Id = new Property(5, Long.class, "step3Id", false, "STEP3_ID");
        public final static Property Step4Id = new Property(6, Long.class, "step4Id", false, "STEP4_ID");
        public final static Property Step5Id = new Property(7, Long.class, "step5Id", false, "STEP5_ID");
        public final static Property Step6Id = new Property(8, Long.class, "step6Id", false, "STEP6_ID");
        public final static Property Step7Id = new Property(9, Long.class, "step7Id", false, "STEP7_ID");
        public final static Property Step8Id = new Property(10, Long.class, "step8Id", false, "STEP8_ID");
        public final static Property Step9Id = new Property(11, Long.class, "step9Id", false, "STEP9_ID");
        public final static Property Step10Id = new Property(12, Long.class, "step10Id", false, "STEP10_ID");
        public final static Property Step11Id = new Property(13, Long.class, "step11Id", false, "STEP11_ID");
        public final static Property Step12Id = new Property(14, Long.class, "step12Id", false, "STEP12_ID");
        public final static Property Step13Id = new Property(15, Long.class, "step13Id", false, "STEP13_ID");
        public final static Property HeadInfoId = new Property(16, Long.class, "headInfoId", false, "HEAD_INFO_ID");
        public final static Property ProblemId = new Property(17, Long.class, "problemId", false, "PROBLEM_ID");
    }

    private DaoSession daoSession;


    public ShiMuResbeanDao(DaoConfig config) {
        super(config);
    }
    
    public ShiMuResbeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHI_MU_RESBEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CURRENT_TIME\" TEXT," + // 1: currentTime
                "\"IS_COMPLETE\" INTEGER NOT NULL ," + // 2: isComplete
                "\"STEP1_ID\" INTEGER," + // 3: step1Id
                "\"STEP2_ID\" INTEGER," + // 4: step2Id
                "\"STEP3_ID\" INTEGER," + // 5: step3Id
                "\"STEP4_ID\" INTEGER," + // 6: step4Id
                "\"STEP5_ID\" INTEGER," + // 7: step5Id
                "\"STEP6_ID\" INTEGER," + // 8: step6Id
                "\"STEP7_ID\" INTEGER," + // 9: step7Id
                "\"STEP8_ID\" INTEGER," + // 10: step8Id
                "\"STEP9_ID\" INTEGER," + // 11: step9Id
                "\"STEP10_ID\" INTEGER," + // 12: step10Id
                "\"STEP11_ID\" INTEGER," + // 13: step11Id
                "\"STEP12_ID\" INTEGER," + // 14: step12Id
                "\"STEP13_ID\" INTEGER," + // 15: step13Id
                "\"HEAD_INFO_ID\" INTEGER," + // 16: headInfoId
                "\"PROBLEM_ID\" INTEGER);"); // 17: problemId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHI_MU_RESBEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ShiMuResbean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String currentTime = entity.getCurrentTime();
        if (currentTime != null) {
            stmt.bindString(2, currentTime);
        }
        stmt.bindLong(3, entity.getIsComplete() ? 1L: 0L);
 
        Long step1Id = entity.getStep1Id();
        if (step1Id != null) {
            stmt.bindLong(4, step1Id);
        }
 
        Long step2Id = entity.getStep2Id();
        if (step2Id != null) {
            stmt.bindLong(5, step2Id);
        }
 
        Long step3Id = entity.getStep3Id();
        if (step3Id != null) {
            stmt.bindLong(6, step3Id);
        }
 
        Long step4Id = entity.getStep4Id();
        if (step4Id != null) {
            stmt.bindLong(7, step4Id);
        }
 
        Long step5Id = entity.getStep5Id();
        if (step5Id != null) {
            stmt.bindLong(8, step5Id);
        }
 
        Long step6Id = entity.getStep6Id();
        if (step6Id != null) {
            stmt.bindLong(9, step6Id);
        }
 
        Long step7Id = entity.getStep7Id();
        if (step7Id != null) {
            stmt.bindLong(10, step7Id);
        }
 
        Long step8Id = entity.getStep8Id();
        if (step8Id != null) {
            stmt.bindLong(11, step8Id);
        }
 
        Long step9Id = entity.getStep9Id();
        if (step9Id != null) {
            stmt.bindLong(12, step9Id);
        }
 
        Long step10Id = entity.getStep10Id();
        if (step10Id != null) {
            stmt.bindLong(13, step10Id);
        }
 
        Long step11Id = entity.getStep11Id();
        if (step11Id != null) {
            stmt.bindLong(14, step11Id);
        }
 
        Long step12Id = entity.getStep12Id();
        if (step12Id != null) {
            stmt.bindLong(15, step12Id);
        }
 
        Long step13Id = entity.getStep13Id();
        if (step13Id != null) {
            stmt.bindLong(16, step13Id);
        }
 
        Long headInfoId = entity.getHeadInfoId();
        if (headInfoId != null) {
            stmt.bindLong(17, headInfoId);
        }
 
        Long problemId = entity.getProblemId();
        if (problemId != null) {
            stmt.bindLong(18, problemId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ShiMuResbean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String currentTime = entity.getCurrentTime();
        if (currentTime != null) {
            stmt.bindString(2, currentTime);
        }
        stmt.bindLong(3, entity.getIsComplete() ? 1L: 0L);
 
        Long step1Id = entity.getStep1Id();
        if (step1Id != null) {
            stmt.bindLong(4, step1Id);
        }
 
        Long step2Id = entity.getStep2Id();
        if (step2Id != null) {
            stmt.bindLong(5, step2Id);
        }
 
        Long step3Id = entity.getStep3Id();
        if (step3Id != null) {
            stmt.bindLong(6, step3Id);
        }
 
        Long step4Id = entity.getStep4Id();
        if (step4Id != null) {
            stmt.bindLong(7, step4Id);
        }
 
        Long step5Id = entity.getStep5Id();
        if (step5Id != null) {
            stmt.bindLong(8, step5Id);
        }
 
        Long step6Id = entity.getStep6Id();
        if (step6Id != null) {
            stmt.bindLong(9, step6Id);
        }
 
        Long step7Id = entity.getStep7Id();
        if (step7Id != null) {
            stmt.bindLong(10, step7Id);
        }
 
        Long step8Id = entity.getStep8Id();
        if (step8Id != null) {
            stmt.bindLong(11, step8Id);
        }
 
        Long step9Id = entity.getStep9Id();
        if (step9Id != null) {
            stmt.bindLong(12, step9Id);
        }
 
        Long step10Id = entity.getStep10Id();
        if (step10Id != null) {
            stmt.bindLong(13, step10Id);
        }
 
        Long step11Id = entity.getStep11Id();
        if (step11Id != null) {
            stmt.bindLong(14, step11Id);
        }
 
        Long step12Id = entity.getStep12Id();
        if (step12Id != null) {
            stmt.bindLong(15, step12Id);
        }
 
        Long step13Id = entity.getStep13Id();
        if (step13Id != null) {
            stmt.bindLong(16, step13Id);
        }
 
        Long headInfoId = entity.getHeadInfoId();
        if (headInfoId != null) {
            stmt.bindLong(17, headInfoId);
        }
 
        Long problemId = entity.getProblemId();
        if (problemId != null) {
            stmt.bindLong(18, problemId);
        }
    }

    @Override
    protected final void attachEntity(ShiMuResbean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ShiMuResbean readEntity(Cursor cursor, int offset) {
        ShiMuResbean entity = new ShiMuResbean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // currentTime
            cursor.getShort(offset + 2) != 0, // isComplete
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // step1Id
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // step2Id
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // step3Id
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // step4Id
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // step5Id
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // step6Id
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // step7Id
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // step8Id
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // step9Id
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // step10Id
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13), // step11Id
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14), // step12Id
            cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15), // step13Id
            cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16), // headInfoId
            cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17) // problemId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ShiMuResbean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCurrentTime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIsComplete(cursor.getShort(offset + 2) != 0);
        entity.setStep1Id(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setStep2Id(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setStep3Id(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setStep4Id(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setStep5Id(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setStep6Id(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setStep7Id(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setStep8Id(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setStep9Id(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setStep10Id(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setStep11Id(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
        entity.setStep12Id(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
        entity.setStep13Id(cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15));
        entity.setHeadInfoId(cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16));
        entity.setProblemId(cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ShiMuResbean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ShiMuResbean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ShiMuResbean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getProblemResbeanDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getHeadInfoResbeanDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getStep1ResbeanDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T3", daoSession.getStep2ResbeanDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T4", daoSession.getStep3MuResBeanDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T5", daoSession.getStep4ResbeanDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T6", daoSession.getStep5ResbeanDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T7", daoSession.getStep6ResbeanDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T8", daoSession.getStep7ResbeanDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T9", daoSession.getStep8ResbeanDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T10", daoSession.getStep9ResbeanDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T11", daoSession.getStep10ResbeanDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T12", daoSession.getStep11ResbeanDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T13", daoSession.getStep12ResBeanDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T14", daoSession.getStep13ResbeanDao().getAllColumns());
            builder.append(" FROM SHI_MU_RESBEAN T");
            builder.append(" LEFT JOIN PROBLEM_RESBEAN T0 ON T.\"PROBLEM_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN HEAD_INFO_RESBEAN T1 ON T.\"HEAD_INFO_ID\"=T1.\"_id\"");
            builder.append(" LEFT JOIN STEP1_RESBEAN T2 ON T.\"STEP1_ID\"=T2.\"_id\"");
            builder.append(" LEFT JOIN STEP2_RESBEAN T3 ON T.\"STEP2_ID\"=T3.\"_id\"");
            builder.append(" LEFT JOIN STEP3_MU_RES_BEAN T4 ON T.\"STEP3_ID\"=T4.\"_id\"");
            builder.append(" LEFT JOIN STEP4_RESBEAN T5 ON T.\"STEP4_ID\"=T5.\"_id\"");
            builder.append(" LEFT JOIN STEP5_RESBEAN T6 ON T.\"STEP5_ID\"=T6.\"_id\"");
            builder.append(" LEFT JOIN STEP6_RESBEAN T7 ON T.\"STEP6_ID\"=T7.\"_id\"");
            builder.append(" LEFT JOIN STEP7_RESBEAN T8 ON T.\"STEP7_ID\"=T8.\"_id\"");
            builder.append(" LEFT JOIN STEP8_RESBEAN T9 ON T.\"STEP8_ID\"=T9.\"_id\"");
            builder.append(" LEFT JOIN STEP9_RESBEAN T10 ON T.\"STEP9_ID\"=T10.\"_id\"");
            builder.append(" LEFT JOIN STEP10_RESBEAN T11 ON T.\"STEP10_ID\"=T11.\"_id\"");
            builder.append(" LEFT JOIN STEP11_RESBEAN T12 ON T.\"STEP11_ID\"=T12.\"_id\"");
            builder.append(" LEFT JOIN STEP12_RES_BEAN T13 ON T.\"STEP12_ID\"=T13.\"_id\"");
            builder.append(" LEFT JOIN STEP13_RESBEAN T14 ON T.\"STEP13_ID\"=T14.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected ShiMuResbean loadCurrentDeep(Cursor cursor, boolean lock) {
        ShiMuResbean entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        ProblemResbean problemResbean = loadCurrentOther(daoSession.getProblemResbeanDao(), cursor, offset);
        entity.setProblemResbean(problemResbean);
        offset += daoSession.getProblemResbeanDao().getAllColumns().length;

        HeadInfoResbean headInfoResbean = loadCurrentOther(daoSession.getHeadInfoResbeanDao(), cursor, offset);
        entity.setHeadInfoResbean(headInfoResbean);
        offset += daoSession.getHeadInfoResbeanDao().getAllColumns().length;

        Step1Resbean step1Resbean = loadCurrentOther(daoSession.getStep1ResbeanDao(), cursor, offset);
        entity.setStep1Resbean(step1Resbean);
        offset += daoSession.getStep1ResbeanDao().getAllColumns().length;

        Step2Resbean step2Resbean = loadCurrentOther(daoSession.getStep2ResbeanDao(), cursor, offset);
        entity.setStep2Resbean(step2Resbean);
        offset += daoSession.getStep2ResbeanDao().getAllColumns().length;

        Step3MuResBean step3MuResBean = loadCurrentOther(daoSession.getStep3MuResBeanDao(), cursor, offset);
        entity.setStep3MuResBean(step3MuResBean);
        offset += daoSession.getStep3MuResBeanDao().getAllColumns().length;

        Step4Resbean step4Resbean = loadCurrentOther(daoSession.getStep4ResbeanDao(), cursor, offset);
        entity.setStep4Resbean(step4Resbean);
        offset += daoSession.getStep4ResbeanDao().getAllColumns().length;

        Step5Resbean step5Resbean = loadCurrentOther(daoSession.getStep5ResbeanDao(), cursor, offset);
        entity.setStep5Resbean(step5Resbean);
        offset += daoSession.getStep5ResbeanDao().getAllColumns().length;

        Step6Resbean step6Resbean = loadCurrentOther(daoSession.getStep6ResbeanDao(), cursor, offset);
        entity.setStep6Resbean(step6Resbean);
        offset += daoSession.getStep6ResbeanDao().getAllColumns().length;

        Step7Resbean step7Resbean = loadCurrentOther(daoSession.getStep7ResbeanDao(), cursor, offset);
        entity.setStep7Resbean(step7Resbean);
        offset += daoSession.getStep7ResbeanDao().getAllColumns().length;

        Step8Resbean step8Resbean = loadCurrentOther(daoSession.getStep8ResbeanDao(), cursor, offset);
        entity.setStep8Resbean(step8Resbean);
        offset += daoSession.getStep8ResbeanDao().getAllColumns().length;

        Step9Resbean step9Resbean = loadCurrentOther(daoSession.getStep9ResbeanDao(), cursor, offset);
        entity.setStep9Resbean(step9Resbean);
        offset += daoSession.getStep9ResbeanDao().getAllColumns().length;

        Step10Resbean step10Resbean = loadCurrentOther(daoSession.getStep10ResbeanDao(), cursor, offset);
        entity.setStep10Resbean(step10Resbean);
        offset += daoSession.getStep10ResbeanDao().getAllColumns().length;

        Step11Resbean step11Resbean = loadCurrentOther(daoSession.getStep11ResbeanDao(), cursor, offset);
        entity.setStep11Resbean(step11Resbean);
        offset += daoSession.getStep11ResbeanDao().getAllColumns().length;

        Step12ResBean step12Resbean = loadCurrentOther(daoSession.getStep12ResBeanDao(), cursor, offset);
        entity.setStep12Resbean(step12Resbean);
        offset += daoSession.getStep12ResBeanDao().getAllColumns().length;

        Step13Resbean step13Resbean = loadCurrentOther(daoSession.getStep13ResbeanDao(), cursor, offset);
        entity.setStep13Resbean(step13Resbean);

        return entity;    
    }

    public ShiMuResbean loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<ShiMuResbean> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<ShiMuResbean> list = new ArrayList<ShiMuResbean>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<ShiMuResbean> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<ShiMuResbean> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
