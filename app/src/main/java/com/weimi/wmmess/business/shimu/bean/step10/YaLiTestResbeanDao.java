package com.weimi.wmmess.business.shimu.bean.step10;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.weimi.wmmess.business.shimu.bean.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "YA_LI_TEST_RESBEAN".
*/
public class YaLiTestResbeanDao extends AbstractDao<YaLiTestResbean, Long> {

    public static final String TABLENAME = "YA_LI_TEST_RESBEAN";

    /**
     * Properties of entity YaLiTestResbean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property YaLiTestResbeanId = new Property(1, Long.class, "yaLiTestResbeanId", false, "yaLiTestResbeanId");
        public final static Property LengQueTime = new Property(2, String.class, "lengQueTime", false, "LENG_QUE_TIME");
        public final static Property ZhiLiang = new Property(3, String.class, "zhiLiang", false, "ZHI_LIANG");
        public final static Property ChiCun = new Property(4, String.class, "ChiCun", false, "CHI_CUN");
        public final static Property BeiZhu = new Property(5, String.class, "beiZhu", false, "BEI_ZHU");
    }

    private Query<YaLiTestResbean> step10Resbean_YaLiTestResbeansQuery;

    public YaLiTestResbeanDao(DaoConfig config) {
        super(config);
    }
    
    public YaLiTestResbeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"YA_LI_TEST_RESBEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"yaLiTestResbeanId\" INTEGER," + // 1: yaLiTestResbeanId
                "\"LENG_QUE_TIME\" TEXT," + // 2: lengQueTime
                "\"ZHI_LIANG\" TEXT," + // 3: zhiLiang
                "\"CHI_CUN\" TEXT," + // 4: ChiCun
                "\"BEI_ZHU\" TEXT);"); // 5: beiZhu
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"YA_LI_TEST_RESBEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, YaLiTestResbean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long yaLiTestResbeanId = entity.getYaLiTestResbeanId();
        if (yaLiTestResbeanId != null) {
            stmt.bindLong(2, yaLiTestResbeanId);
        }
 
        String lengQueTime = entity.getLengQueTime();
        if (lengQueTime != null) {
            stmt.bindString(3, lengQueTime);
        }
 
        String zhiLiang = entity.getZhiLiang();
        if (zhiLiang != null) {
            stmt.bindString(4, zhiLiang);
        }
 
        String ChiCun = entity.getChiCun();
        if (ChiCun != null) {
            stmt.bindString(5, ChiCun);
        }
 
        String beiZhu = entity.getBeiZhu();
        if (beiZhu != null) {
            stmt.bindString(6, beiZhu);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, YaLiTestResbean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long yaLiTestResbeanId = entity.getYaLiTestResbeanId();
        if (yaLiTestResbeanId != null) {
            stmt.bindLong(2, yaLiTestResbeanId);
        }
 
        String lengQueTime = entity.getLengQueTime();
        if (lengQueTime != null) {
            stmt.bindString(3, lengQueTime);
        }
 
        String zhiLiang = entity.getZhiLiang();
        if (zhiLiang != null) {
            stmt.bindString(4, zhiLiang);
        }
 
        String ChiCun = entity.getChiCun();
        if (ChiCun != null) {
            stmt.bindString(5, ChiCun);
        }
 
        String beiZhu = entity.getBeiZhu();
        if (beiZhu != null) {
            stmt.bindString(6, beiZhu);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public YaLiTestResbean readEntity(Cursor cursor, int offset) {
        YaLiTestResbean entity = new YaLiTestResbean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // yaLiTestResbeanId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // lengQueTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // zhiLiang
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ChiCun
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // beiZhu
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, YaLiTestResbean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setYaLiTestResbeanId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setLengQueTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setZhiLiang(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setChiCun(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBeiZhu(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(YaLiTestResbean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(YaLiTestResbean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(YaLiTestResbean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "yaLiTestResbeans" to-many relationship of Step10Resbean. */
    public List<YaLiTestResbean> _queryStep10Resbean_YaLiTestResbeans(Long yaLiTestResbeanId) {
        synchronized (this) {
            if (step10Resbean_YaLiTestResbeansQuery == null) {
                QueryBuilder<YaLiTestResbean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.YaLiTestResbeanId.eq(null));
                step10Resbean_YaLiTestResbeansQuery = queryBuilder.build();
            }
        }
        Query<YaLiTestResbean> query = step10Resbean_YaLiTestResbeansQuery.forCurrentThread();
        query.setParameter(0, yaLiTestResbeanId);
        return query.list();
    }

}
