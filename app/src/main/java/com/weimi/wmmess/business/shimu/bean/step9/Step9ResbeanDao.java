package com.weimi.wmmess.business.shimu.bean.step9;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.weimi.wmmess.business.shimu.bean.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STEP9_RESBEAN".
*/
public class Step9ResbeanDao extends AbstractDao<Step9Resbean, Long> {

    public static final String TABLENAME = "STEP9_RESBEAN";

    /**
     * Properties of entity Step9Resbean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Step9Id = new Property(0, Long.class, "step9Id", true, "_id");
        public final static Property CurrentStepIsChecked = new Property(1, boolean.class, "currentStepIsChecked", false, "CURRENT_STEP_IS_CHECKED");
        public final static Property YaLiMin = new Property(2, String.class, "yaLiMin", false, "YA_LI_MIN");
        public final static Property YaLiMax = new Property(3, String.class, "yaLiMax", false, "YA_LI_MAX");
        public final static Property YaLiConfirm = new Property(4, String.class, "yaLiConfirm", false, "YA_LI_CONFIRM");
        public final static Property TimeMin = new Property(5, String.class, "timeMin", false, "TIME_MIN");
        public final static Property TimeMax = new Property(6, String.class, "timeMax", false, "TIME_MAX");
        public final static Property TimeConfirm = new Property(7, String.class, "TimeConfirm", false, "TIME_CONFIRM");
    }

    private DaoSession daoSession;


    public Step9ResbeanDao(DaoConfig config) {
        super(config);
    }
    
    public Step9ResbeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STEP9_RESBEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: step9Id
                "\"CURRENT_STEP_IS_CHECKED\" INTEGER NOT NULL ," + // 1: currentStepIsChecked
                "\"YA_LI_MIN\" TEXT," + // 2: yaLiMin
                "\"YA_LI_MAX\" TEXT," + // 3: yaLiMax
                "\"YA_LI_CONFIRM\" TEXT," + // 4: yaLiConfirm
                "\"TIME_MIN\" TEXT," + // 5: timeMin
                "\"TIME_MAX\" TEXT," + // 6: timeMax
                "\"TIME_CONFIRM\" TEXT);"); // 7: TimeConfirm
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STEP9_RESBEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Step9Resbean entity) {
        stmt.clearBindings();
 
        Long step9Id = entity.getStep9Id();
        if (step9Id != null) {
            stmt.bindLong(1, step9Id);
        }
        stmt.bindLong(2, entity.getCurrentStepIsChecked() ? 1L: 0L);
 
        String yaLiMin = entity.getYaLiMin();
        if (yaLiMin != null) {
            stmt.bindString(3, yaLiMin);
        }
 
        String yaLiMax = entity.getYaLiMax();
        if (yaLiMax != null) {
            stmt.bindString(4, yaLiMax);
        }
 
        String yaLiConfirm = entity.getYaLiConfirm();
        if (yaLiConfirm != null) {
            stmt.bindString(5, yaLiConfirm);
        }
 
        String timeMin = entity.getTimeMin();
        if (timeMin != null) {
            stmt.bindString(6, timeMin);
        }
 
        String timeMax = entity.getTimeMax();
        if (timeMax != null) {
            stmt.bindString(7, timeMax);
        }
 
        String TimeConfirm = entity.getTimeConfirm();
        if (TimeConfirm != null) {
            stmt.bindString(8, TimeConfirm);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Step9Resbean entity) {
        stmt.clearBindings();
 
        Long step9Id = entity.getStep9Id();
        if (step9Id != null) {
            stmt.bindLong(1, step9Id);
        }
        stmt.bindLong(2, entity.getCurrentStepIsChecked() ? 1L: 0L);
 
        String yaLiMin = entity.getYaLiMin();
        if (yaLiMin != null) {
            stmt.bindString(3, yaLiMin);
        }
 
        String yaLiMax = entity.getYaLiMax();
        if (yaLiMax != null) {
            stmt.bindString(4, yaLiMax);
        }
 
        String yaLiConfirm = entity.getYaLiConfirm();
        if (yaLiConfirm != null) {
            stmt.bindString(5, yaLiConfirm);
        }
 
        String timeMin = entity.getTimeMin();
        if (timeMin != null) {
            stmt.bindString(6, timeMin);
        }
 
        String timeMax = entity.getTimeMax();
        if (timeMax != null) {
            stmt.bindString(7, timeMax);
        }
 
        String TimeConfirm = entity.getTimeConfirm();
        if (TimeConfirm != null) {
            stmt.bindString(8, TimeConfirm);
        }
    }

    @Override
    protected final void attachEntity(Step9Resbean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Step9Resbean readEntity(Cursor cursor, int offset) {
        Step9Resbean entity = new Step9Resbean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // step9Id
            cursor.getShort(offset + 1) != 0, // currentStepIsChecked
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // yaLiMin
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // yaLiMax
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // yaLiConfirm
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // timeMin
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // timeMax
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // TimeConfirm
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Step9Resbean entity, int offset) {
        entity.setStep9Id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCurrentStepIsChecked(cursor.getShort(offset + 1) != 0);
        entity.setYaLiMin(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setYaLiMax(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setYaLiConfirm(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTimeMin(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTimeMax(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTimeConfirm(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Step9Resbean entity, long rowId) {
        entity.setStep9Id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Step9Resbean entity) {
        if(entity != null) {
            return entity.getStep9Id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Step9Resbean entity) {
        return entity.getStep9Id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
