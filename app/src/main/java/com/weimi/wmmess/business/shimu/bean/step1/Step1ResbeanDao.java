package com.weimi.wmmess.business.shimu.bean.step1;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.weimi.wmmess.business.shimu.bean.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STEP1_RESBEAN".
*/
public class Step1ResbeanDao extends AbstractDao<Step1Resbean, Long> {

    public static final String TABLENAME = "STEP1_RESBEAN";

    /**
     * Properties of entity Step1Resbean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Step1ResbeanId = new Property(0, Long.class, "step1ResbeanId", true, "_id");
        public final static Property CurrentStepIsChecked = new Property(1, boolean.class, "currentStepIsChecked", false, "CURRENT_STEP_IS_CHECKED");
        public final static Property OneIsChecked = new Property(2, boolean.class, "oneIsChecked", false, "ONE_IS_CHECKED");
        public final static Property TwoIsChecked = new Property(3, boolean.class, "twoIsChecked", false, "TWO_IS_CHECKED");
        public final static Property ThreeIsChecked = new Property(4, boolean.class, "threeIsChecked", false, "THREE_IS_CHECKED");
        public final static Property FourIsChecked = new Property(5, boolean.class, "fourIsChecked", false, "FOUR_IS_CHECKED");
        public final static Property FiveIsChecked = new Property(6, boolean.class, "fiveIsChecked", false, "FIVE_IS_CHECKED");
        public final static Property SixIsChecked = new Property(7, boolean.class, "sixIsChecked", false, "SIX_IS_CHECKED");
    }


    public Step1ResbeanDao(DaoConfig config) {
        super(config);
    }
    
    public Step1ResbeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STEP1_RESBEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: step1ResbeanId
                "\"CURRENT_STEP_IS_CHECKED\" INTEGER NOT NULL ," + // 1: currentStepIsChecked
                "\"ONE_IS_CHECKED\" INTEGER NOT NULL ," + // 2: oneIsChecked
                "\"TWO_IS_CHECKED\" INTEGER NOT NULL ," + // 3: twoIsChecked
                "\"THREE_IS_CHECKED\" INTEGER NOT NULL ," + // 4: threeIsChecked
                "\"FOUR_IS_CHECKED\" INTEGER NOT NULL ," + // 5: fourIsChecked
                "\"FIVE_IS_CHECKED\" INTEGER NOT NULL ," + // 6: fiveIsChecked
                "\"SIX_IS_CHECKED\" INTEGER NOT NULL );"); // 7: sixIsChecked
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STEP1_RESBEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Step1Resbean entity) {
        stmt.clearBindings();
 
        Long step1ResbeanId = entity.getStep1ResbeanId();
        if (step1ResbeanId != null) {
            stmt.bindLong(1, step1ResbeanId);
        }
        stmt.bindLong(2, entity.getCurrentStepIsChecked() ? 1L: 0L);
        stmt.bindLong(3, entity.getOneIsChecked() ? 1L: 0L);
        stmt.bindLong(4, entity.getTwoIsChecked() ? 1L: 0L);
        stmt.bindLong(5, entity.getThreeIsChecked() ? 1L: 0L);
        stmt.bindLong(6, entity.getFourIsChecked() ? 1L: 0L);
        stmt.bindLong(7, entity.getFiveIsChecked() ? 1L: 0L);
        stmt.bindLong(8, entity.getSixIsChecked() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Step1Resbean entity) {
        stmt.clearBindings();
 
        Long step1ResbeanId = entity.getStep1ResbeanId();
        if (step1ResbeanId != null) {
            stmt.bindLong(1, step1ResbeanId);
        }
        stmt.bindLong(2, entity.getCurrentStepIsChecked() ? 1L: 0L);
        stmt.bindLong(3, entity.getOneIsChecked() ? 1L: 0L);
        stmt.bindLong(4, entity.getTwoIsChecked() ? 1L: 0L);
        stmt.bindLong(5, entity.getThreeIsChecked() ? 1L: 0L);
        stmt.bindLong(6, entity.getFourIsChecked() ? 1L: 0L);
        stmt.bindLong(7, entity.getFiveIsChecked() ? 1L: 0L);
        stmt.bindLong(8, entity.getSixIsChecked() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Step1Resbean readEntity(Cursor cursor, int offset) {
        Step1Resbean entity = new Step1Resbean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // step1ResbeanId
            cursor.getShort(offset + 1) != 0, // currentStepIsChecked
            cursor.getShort(offset + 2) != 0, // oneIsChecked
            cursor.getShort(offset + 3) != 0, // twoIsChecked
            cursor.getShort(offset + 4) != 0, // threeIsChecked
            cursor.getShort(offset + 5) != 0, // fourIsChecked
            cursor.getShort(offset + 6) != 0, // fiveIsChecked
            cursor.getShort(offset + 7) != 0 // sixIsChecked
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Step1Resbean entity, int offset) {
        entity.setStep1ResbeanId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCurrentStepIsChecked(cursor.getShort(offset + 1) != 0);
        entity.setOneIsChecked(cursor.getShort(offset + 2) != 0);
        entity.setTwoIsChecked(cursor.getShort(offset + 3) != 0);
        entity.setThreeIsChecked(cursor.getShort(offset + 4) != 0);
        entity.setFourIsChecked(cursor.getShort(offset + 5) != 0);
        entity.setFiveIsChecked(cursor.getShort(offset + 6) != 0);
        entity.setSixIsChecked(cursor.getShort(offset + 7) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Step1Resbean entity, long rowId) {
        entity.setStep1ResbeanId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Step1Resbean entity) {
        if(entity != null) {
            return entity.getStep1ResbeanId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Step1Resbean entity) {
        return entity.getStep1ResbeanId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
