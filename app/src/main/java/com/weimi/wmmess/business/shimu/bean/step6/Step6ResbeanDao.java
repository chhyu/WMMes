package com.weimi.wmmess.business.shimu.bean.step6;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.weimi.wmmess.business.shimu.bean.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STEP6_RESBEAN".
*/
public class Step6ResbeanDao extends AbstractDao<Step6Resbean, Long> {

    public static final String TABLENAME = "STEP6_RESBEAN";

    /**
     * Properties of entity Step6Resbean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Step6Id = new Property(0, Long.class, "step6Id", true, "_id");
        public final static Property CurrentStepIsChecked = new Property(1, boolean.class, "currentStepIsChecked", false, "CURRENT_STEP_IS_CHECKED");
        public final static Property SheDingZhuSuYaLi = new Property(2, double.class, "sheDingZhuSuYaLi", false, "SHE_DING_ZHU_SU_YA_LI");
        public final static Property ShijiOne = new Property(3, double.class, "shijiOne", false, "SHIJI_ONE");
        public final static Property ShijiTwo = new Property(4, double.class, "shijiTwo", false, "SHIJI_TWO");
        public final static Property ShijiThree = new Property(5, double.class, "shijiThree", false, "SHIJI_THREE");
        public final static Property ShijiFour = new Property(6, double.class, "shijiFour", false, "SHIJI_FOUR");
        public final static Property ShijiFive = new Property(7, double.class, "shijiFive", false, "SHIJI_FIVE");
        public final static Property ResultOne = new Property(8, int.class, "resultOne", false, "RESULT_ONE");
        public final static Property ResultTwo = new Property(9, int.class, "resultTwo", false, "RESULT_TWO");
        public final static Property ResultThree = new Property(10, int.class, "resultThree", false, "RESULT_THREE");
        public final static Property ResultFour = new Property(11, int.class, "resultFour", false, "RESULT_FOUR");
        public final static Property ResultFive = new Property(12, int.class, "resultFive", false, "RESULT_FIVE");
    }


    public Step6ResbeanDao(DaoConfig config) {
        super(config);
    }
    
    public Step6ResbeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STEP6_RESBEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: step6Id
                "\"CURRENT_STEP_IS_CHECKED\" INTEGER NOT NULL ," + // 1: currentStepIsChecked
                "\"SHE_DING_ZHU_SU_YA_LI\" REAL NOT NULL ," + // 2: sheDingZhuSuYaLi
                "\"SHIJI_ONE\" REAL NOT NULL ," + // 3: shijiOne
                "\"SHIJI_TWO\" REAL NOT NULL ," + // 4: shijiTwo
                "\"SHIJI_THREE\" REAL NOT NULL ," + // 5: shijiThree
                "\"SHIJI_FOUR\" REAL NOT NULL ," + // 6: shijiFour
                "\"SHIJI_FIVE\" REAL NOT NULL ," + // 7: shijiFive
                "\"RESULT_ONE\" INTEGER NOT NULL ," + // 8: resultOne
                "\"RESULT_TWO\" INTEGER NOT NULL ," + // 9: resultTwo
                "\"RESULT_THREE\" INTEGER NOT NULL ," + // 10: resultThree
                "\"RESULT_FOUR\" INTEGER NOT NULL ," + // 11: resultFour
                "\"RESULT_FIVE\" INTEGER NOT NULL );"); // 12: resultFive
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STEP6_RESBEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Step6Resbean entity) {
        stmt.clearBindings();
 
        Long step6Id = entity.getStep6Id();
        if (step6Id != null) {
            stmt.bindLong(1, step6Id);
        }
        stmt.bindLong(2, entity.getCurrentStepIsChecked() ? 1L: 0L);
        stmt.bindDouble(3, entity.getSheDingZhuSuYaLi());
        stmt.bindDouble(4, entity.getShijiOne());
        stmt.bindDouble(5, entity.getShijiTwo());
        stmt.bindDouble(6, entity.getShijiThree());
        stmt.bindDouble(7, entity.getShijiFour());
        stmt.bindDouble(8, entity.getShijiFive());
        stmt.bindLong(9, entity.getResultOne());
        stmt.bindLong(10, entity.getResultTwo());
        stmt.bindLong(11, entity.getResultThree());
        stmt.bindLong(12, entity.getResultFour());
        stmt.bindLong(13, entity.getResultFive());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Step6Resbean entity) {
        stmt.clearBindings();
 
        Long step6Id = entity.getStep6Id();
        if (step6Id != null) {
            stmt.bindLong(1, step6Id);
        }
        stmt.bindLong(2, entity.getCurrentStepIsChecked() ? 1L: 0L);
        stmt.bindDouble(3, entity.getSheDingZhuSuYaLi());
        stmt.bindDouble(4, entity.getShijiOne());
        stmt.bindDouble(5, entity.getShijiTwo());
        stmt.bindDouble(6, entity.getShijiThree());
        stmt.bindDouble(7, entity.getShijiFour());
        stmt.bindDouble(8, entity.getShijiFive());
        stmt.bindLong(9, entity.getResultOne());
        stmt.bindLong(10, entity.getResultTwo());
        stmt.bindLong(11, entity.getResultThree());
        stmt.bindLong(12, entity.getResultFour());
        stmt.bindLong(13, entity.getResultFive());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Step6Resbean readEntity(Cursor cursor, int offset) {
        Step6Resbean entity = new Step6Resbean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // step6Id
            cursor.getShort(offset + 1) != 0, // currentStepIsChecked
            cursor.getDouble(offset + 2), // sheDingZhuSuYaLi
            cursor.getDouble(offset + 3), // shijiOne
            cursor.getDouble(offset + 4), // shijiTwo
            cursor.getDouble(offset + 5), // shijiThree
            cursor.getDouble(offset + 6), // shijiFour
            cursor.getDouble(offset + 7), // shijiFive
            cursor.getInt(offset + 8), // resultOne
            cursor.getInt(offset + 9), // resultTwo
            cursor.getInt(offset + 10), // resultThree
            cursor.getInt(offset + 11), // resultFour
            cursor.getInt(offset + 12) // resultFive
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Step6Resbean entity, int offset) {
        entity.setStep6Id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCurrentStepIsChecked(cursor.getShort(offset + 1) != 0);
        entity.setSheDingZhuSuYaLi(cursor.getDouble(offset + 2));
        entity.setShijiOne(cursor.getDouble(offset + 3));
        entity.setShijiTwo(cursor.getDouble(offset + 4));
        entity.setShijiThree(cursor.getDouble(offset + 5));
        entity.setShijiFour(cursor.getDouble(offset + 6));
        entity.setShijiFive(cursor.getDouble(offset + 7));
        entity.setResultOne(cursor.getInt(offset + 8));
        entity.setResultTwo(cursor.getInt(offset + 9));
        entity.setResultThree(cursor.getInt(offset + 10));
        entity.setResultFour(cursor.getInt(offset + 11));
        entity.setResultFive(cursor.getInt(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Step6Resbean entity, long rowId) {
        entity.setStep6Id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Step6Resbean entity) {
        if(entity != null) {
            return entity.getStep6Id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Step6Resbean entity) {
        return entity.getStep6Id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
