package com.weimi.wmmess.business.shimu.bean.step9;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.weimi.wmmess.business.shimu.bean.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BAO_YA_YA_LI_RESBEAN".
*/
public class BaoYaYaLiResbeanDao extends AbstractDao<BaoYaYaLiResbean, Long> {

    public static final String TABLENAME = "BAO_YA_YA_LI_RESBEAN";

    /**
     * Properties of entity BaoYaYaLiResbean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BaoYaYaLiResbeanId = new Property(1, Long.class, "baoYaYaLiResbeanId", false, "baoYaYaLiResbeanId");
        public final static Property Yali = new Property(2, String.class, "yali", false, "YALI");
        public final static Property YaLiOne = new Property(3, String.class, "yaLiOne", false, "YA_LI_ONE");
        public final static Property YaLiTwo = new Property(4, String.class, "yaLiTwo", false, "YA_LI_TWO");
        public final static Property YaLiThree = new Property(5, String.class, "yaLiThree", false, "YA_LI_THREE");
        public final static Property YaLiAverageValue = new Property(6, String.class, "yaLiAverageValue", false, "YA_LI_AVERAGE_VALUE");
        public final static Property YaLiBeizhu = new Property(7, String.class, "yaLiBeizhu", false, "YA_LI_BEIZHU");
    }

    private Query<BaoYaYaLiResbean> step9Resbean_BaoYaYaLiResbeansQuery;

    public BaoYaYaLiResbeanDao(DaoConfig config) {
        super(config);
    }
    
    public BaoYaYaLiResbeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BAO_YA_YA_LI_RESBEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"baoYaYaLiResbeanId\" INTEGER," + // 1: baoYaYaLiResbeanId
                "\"YALI\" TEXT," + // 2: yali
                "\"YA_LI_ONE\" TEXT," + // 3: yaLiOne
                "\"YA_LI_TWO\" TEXT," + // 4: yaLiTwo
                "\"YA_LI_THREE\" TEXT," + // 5: yaLiThree
                "\"YA_LI_AVERAGE_VALUE\" TEXT," + // 6: yaLiAverageValue
                "\"YA_LI_BEIZHU\" TEXT);"); // 7: yaLiBeizhu
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BAO_YA_YA_LI_RESBEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BaoYaYaLiResbean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long baoYaYaLiResbeanId = entity.getBaoYaYaLiResbeanId();
        if (baoYaYaLiResbeanId != null) {
            stmt.bindLong(2, baoYaYaLiResbeanId);
        }
 
        String yali = entity.getYali();
        if (yali != null) {
            stmt.bindString(3, yali);
        }
 
        String yaLiOne = entity.getYaLiOne();
        if (yaLiOne != null) {
            stmt.bindString(4, yaLiOne);
        }
 
        String yaLiTwo = entity.getYaLiTwo();
        if (yaLiTwo != null) {
            stmt.bindString(5, yaLiTwo);
        }
 
        String yaLiThree = entity.getYaLiThree();
        if (yaLiThree != null) {
            stmt.bindString(6, yaLiThree);
        }
 
        String yaLiAverageValue = entity.getYaLiAverageValue();
        if (yaLiAverageValue != null) {
            stmt.bindString(7, yaLiAverageValue);
        }
 
        String yaLiBeizhu = entity.getYaLiBeizhu();
        if (yaLiBeizhu != null) {
            stmt.bindString(8, yaLiBeizhu);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BaoYaYaLiResbean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long baoYaYaLiResbeanId = entity.getBaoYaYaLiResbeanId();
        if (baoYaYaLiResbeanId != null) {
            stmt.bindLong(2, baoYaYaLiResbeanId);
        }
 
        String yali = entity.getYali();
        if (yali != null) {
            stmt.bindString(3, yali);
        }
 
        String yaLiOne = entity.getYaLiOne();
        if (yaLiOne != null) {
            stmt.bindString(4, yaLiOne);
        }
 
        String yaLiTwo = entity.getYaLiTwo();
        if (yaLiTwo != null) {
            stmt.bindString(5, yaLiTwo);
        }
 
        String yaLiThree = entity.getYaLiThree();
        if (yaLiThree != null) {
            stmt.bindString(6, yaLiThree);
        }
 
        String yaLiAverageValue = entity.getYaLiAverageValue();
        if (yaLiAverageValue != null) {
            stmt.bindString(7, yaLiAverageValue);
        }
 
        String yaLiBeizhu = entity.getYaLiBeizhu();
        if (yaLiBeizhu != null) {
            stmt.bindString(8, yaLiBeizhu);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BaoYaYaLiResbean readEntity(Cursor cursor, int offset) {
        BaoYaYaLiResbean entity = new BaoYaYaLiResbean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // baoYaYaLiResbeanId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // yali
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // yaLiOne
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // yaLiTwo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // yaLiThree
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // yaLiAverageValue
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // yaLiBeizhu
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BaoYaYaLiResbean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBaoYaYaLiResbeanId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setYali(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setYaLiOne(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setYaLiTwo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setYaLiThree(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setYaLiAverageValue(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setYaLiBeizhu(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BaoYaYaLiResbean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BaoYaYaLiResbean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BaoYaYaLiResbean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "baoYaYaLiResbeans" to-many relationship of Step9Resbean. */
    public List<BaoYaYaLiResbean> _queryStep9Resbean_BaoYaYaLiResbeans(Long baoYaYaLiResbeanId) {
        synchronized (this) {
            if (step9Resbean_BaoYaYaLiResbeansQuery == null) {
                QueryBuilder<BaoYaYaLiResbean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.BaoYaYaLiResbeanId.eq(null));
                step9Resbean_BaoYaYaLiResbeansQuery = queryBuilder.build();
            }
        }
        Query<BaoYaYaLiResbean> query = step9Resbean_BaoYaYaLiResbeansQuery.forCurrentThread();
        query.setParameter(0, baoYaYaLiResbeanId);
        return query.list();
    }

}
