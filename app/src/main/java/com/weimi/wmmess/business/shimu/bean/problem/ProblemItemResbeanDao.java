package com.weimi.wmmess.business.shimu.bean.problem;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.weimi.wmmess.business.shimu.bean.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROBLEM_ITEM_RESBEAN".
*/
public class ProblemItemResbeanDao extends AbstractDao<ProblemItemResbean, Long> {

    public static final String TABLENAME = "PROBLEM_ITEM_RESBEAN";

    /**
     * Properties of entity ProblemItemResbean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ProblemItemResbeanId = new Property(1, Long.class, "problemItemResbeanId", false, "problemItemResbeanId");
        public final static Property Index = new Property(2, int.class, "index", false, "INDEX");
        public final static Property Describe = new Property(3, String.class, "describe", false, "DESCRIBE");
        public final static Property Reason = new Property(4, String.class, "reason", false, "REASON");
        public final static Property Solution = new Property(5, String.class, "solution", false, "SOLUTION");
        public final static Property CompleteDate = new Property(6, String.class, "completeDate", false, "COMPLETE_DATE");
        public final static Property Person = new Property(7, String.class, "person", false, "PERSON");
    }

    private Query<ProblemItemResbean> problemResbean_ProblemItemResbeansQuery;

    public ProblemItemResbeanDao(DaoConfig config) {
        super(config);
    }
    
    public ProblemItemResbeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROBLEM_ITEM_RESBEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"problemItemResbeanId\" INTEGER," + // 1: problemItemResbeanId
                "\"INDEX\" INTEGER NOT NULL ," + // 2: index
                "\"DESCRIBE\" TEXT," + // 3: describe
                "\"REASON\" TEXT," + // 4: reason
                "\"SOLUTION\" TEXT," + // 5: solution
                "\"COMPLETE_DATE\" TEXT," + // 6: completeDate
                "\"PERSON\" TEXT);"); // 7: person
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROBLEM_ITEM_RESBEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ProblemItemResbean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long problemItemResbeanId = entity.getProblemItemResbeanId();
        if (problemItemResbeanId != null) {
            stmt.bindLong(2, problemItemResbeanId);
        }
        stmt.bindLong(3, entity.getIndex());
 
        String describe = entity.getDescribe();
        if (describe != null) {
            stmt.bindString(4, describe);
        }
 
        String reason = entity.getReason();
        if (reason != null) {
            stmt.bindString(5, reason);
        }
 
        String solution = entity.getSolution();
        if (solution != null) {
            stmt.bindString(6, solution);
        }
 
        String completeDate = entity.getCompleteDate();
        if (completeDate != null) {
            stmt.bindString(7, completeDate);
        }
 
        String person = entity.getPerson();
        if (person != null) {
            stmt.bindString(8, person);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ProblemItemResbean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long problemItemResbeanId = entity.getProblemItemResbeanId();
        if (problemItemResbeanId != null) {
            stmt.bindLong(2, problemItemResbeanId);
        }
        stmt.bindLong(3, entity.getIndex());
 
        String describe = entity.getDescribe();
        if (describe != null) {
            stmt.bindString(4, describe);
        }
 
        String reason = entity.getReason();
        if (reason != null) {
            stmt.bindString(5, reason);
        }
 
        String solution = entity.getSolution();
        if (solution != null) {
            stmt.bindString(6, solution);
        }
 
        String completeDate = entity.getCompleteDate();
        if (completeDate != null) {
            stmt.bindString(7, completeDate);
        }
 
        String person = entity.getPerson();
        if (person != null) {
            stmt.bindString(8, person);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ProblemItemResbean readEntity(Cursor cursor, int offset) {
        ProblemItemResbean entity = new ProblemItemResbean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // problemItemResbeanId
            cursor.getInt(offset + 2), // index
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // describe
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // reason
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // solution
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // completeDate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // person
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ProblemItemResbean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProblemItemResbeanId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setIndex(cursor.getInt(offset + 2));
        entity.setDescribe(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setReason(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSolution(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCompleteDate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPerson(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ProblemItemResbean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ProblemItemResbean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ProblemItemResbean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "problemItemResbeans" to-many relationship of ProblemResbean. */
    public List<ProblemItemResbean> _queryProblemResbean_ProblemItemResbeans(Long problemItemResbeanId) {
        synchronized (this) {
            if (problemResbean_ProblemItemResbeansQuery == null) {
                QueryBuilder<ProblemItemResbean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ProblemItemResbeanId.eq(null));
                problemResbean_ProblemItemResbeansQuery = queryBuilder.build();
            }
        }
        Query<ProblemItemResbean> query = problemResbean_ProblemItemResbeansQuery.forCurrentThread();
        query.setParameter(0, problemItemResbeanId);
        return query.list();
    }

}
