package com.weimi.wmmess.business.shimu.bean;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.util.Log;

import org.greenrobot.greendao.AbstractDaoMaster;
import org.greenrobot.greendao.database.StandardDatabase;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseOpenHelper;
import org.greenrobot.greendao.identityscope.IdentityScopeType;

import com.weimi.wmmess.business.shimu.bean.problem.ProblemItemResbeanDao;
import com.weimi.wmmess.business.shimu.bean.problem.ProblemResbeanDao;
import com.weimi.wmmess.business.shimu.bean.step1.Step1ResbeanDao;
import com.weimi.wmmess.business.shimu.bean.step10.Step10ResbeanDao;
import com.weimi.wmmess.business.shimu.bean.step10.YaLiTestResbeanDao;
import com.weimi.wmmess.business.shimu.bean.step11.Step11ResbeanDao;
import com.weimi.wmmess.business.shimu.bean.step12.Step12ResBeanDao;
import com.weimi.wmmess.business.shimu.bean.step13.Step13ResbeanDao;
import com.weimi.wmmess.business.shimu.bean.step2.Step2ResbeanDao;
import com.weimi.wmmess.business.shimu.bean.step3.FixSideResbeanDao;
import com.weimi.wmmess.business.shimu.bean.step3.MoveSideResbeanDao;
import com.weimi.wmmess.business.shimu.bean.step3.SlideResbeanDao;
import com.weimi.wmmess.business.shimu.bean.step3.Step3MuResBeanDao;
import com.weimi.wmmess.business.shimu.bean.step3.Step3ShuiLuDateDao;
import com.weimi.wmmess.business.shimu.bean.step4.KongZhiDianResbeanDao;
import com.weimi.wmmess.business.shimu.bean.step4.Step4ResbeanDao;
import com.weimi.wmmess.business.shimu.bean.step4.ZhuLiuDaoResbeanDao;
import com.weimi.wmmess.business.shimu.bean.step5.Step5ResbeanDao;
import com.weimi.wmmess.business.shimu.bean.step6.Step6ResbeanDao;
import com.weimi.wmmess.business.shimu.bean.step7.Step7ResbeanDao;
import com.weimi.wmmess.business.shimu.bean.step7.ZhuSuResbeanDao;
import com.weimi.wmmess.business.shimu.bean.step8.ChongTianPingHengResbeanDao;
import com.weimi.wmmess.business.shimu.bean.step8.Step8ResbeanDao;
import com.weimi.wmmess.business.shimu.bean.step9.BaoYaTimeResbeanDao;
import com.weimi.wmmess.business.shimu.bean.step9.BaoYaYaLiResbeanDao;
import com.weimi.wmmess.business.shimu.bean.step9.Step9ResbeanDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * Master of DAO (schema version 1): knows all DAOs.
 */
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 1;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(Database db, boolean ifNotExists) {
        HeadInfoResbeanDao.createTable(db, ifNotExists);
        ProblemItemResbeanDao.createTable(db, ifNotExists);
        ProblemResbeanDao.createTable(db, ifNotExists);
        ShiMuResbeanDao.createTable(db, ifNotExists);
        Step1ResbeanDao.createTable(db, ifNotExists);
        Step10ResbeanDao.createTable(db, ifNotExists);
        YaLiTestResbeanDao.createTable(db, ifNotExists);
        Step11ResbeanDao.createTable(db, ifNotExists);
        Step12ResBeanDao.createTable(db, ifNotExists);
        Step13ResbeanDao.createTable(db, ifNotExists);
        Step2ResbeanDao.createTable(db, ifNotExists);
        FixSideResbeanDao.createTable(db, ifNotExists);
        MoveSideResbeanDao.createTable(db, ifNotExists);
        SlideResbeanDao.createTable(db, ifNotExists);
        Step3MuResBeanDao.createTable(db, ifNotExists);
        Step3ShuiLuDateDao.createTable(db, ifNotExists);
        KongZhiDianResbeanDao.createTable(db, ifNotExists);
        Step4ResbeanDao.createTable(db, ifNotExists);
        ZhuLiuDaoResbeanDao.createTable(db, ifNotExists);
        Step5ResbeanDao.createTable(db, ifNotExists);
        Step6ResbeanDao.createTable(db, ifNotExists);
        Step7ResbeanDao.createTable(db, ifNotExists);
        ZhuSuResbeanDao.createTable(db, ifNotExists);
        ChongTianPingHengResbeanDao.createTable(db, ifNotExists);
        Step8ResbeanDao.createTable(db, ifNotExists);
        BaoYaTimeResbeanDao.createTable(db, ifNotExists);
        BaoYaYaLiResbeanDao.createTable(db, ifNotExists);
        Step9ResbeanDao.createTable(db, ifNotExists);
    }

    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(Database db, boolean ifExists) {
        HeadInfoResbeanDao.dropTable(db, ifExists);
        ProblemItemResbeanDao.dropTable(db, ifExists);
        ProblemResbeanDao.dropTable(db, ifExists);
        ShiMuResbeanDao.dropTable(db, ifExists);
        Step1ResbeanDao.dropTable(db, ifExists);
        Step10ResbeanDao.dropTable(db, ifExists);
        YaLiTestResbeanDao.dropTable(db, ifExists);
        Step11ResbeanDao.dropTable(db, ifExists);
        Step12ResBeanDao.dropTable(db, ifExists);
        Step13ResbeanDao.dropTable(db, ifExists);
        Step2ResbeanDao.dropTable(db, ifExists);
        FixSideResbeanDao.dropTable(db, ifExists);
        MoveSideResbeanDao.dropTable(db, ifExists);
        SlideResbeanDao.dropTable(db, ifExists);
        Step3MuResBeanDao.dropTable(db, ifExists);
        Step3ShuiLuDateDao.dropTable(db, ifExists);
        KongZhiDianResbeanDao.dropTable(db, ifExists);
        Step4ResbeanDao.dropTable(db, ifExists);
        ZhuLiuDaoResbeanDao.dropTable(db, ifExists);
        Step5ResbeanDao.dropTable(db, ifExists);
        Step6ResbeanDao.dropTable(db, ifExists);
        Step7ResbeanDao.dropTable(db, ifExists);
        ZhuSuResbeanDao.dropTable(db, ifExists);
        ChongTianPingHengResbeanDao.dropTable(db, ifExists);
        Step8ResbeanDao.dropTable(db, ifExists);
        BaoYaTimeResbeanDao.dropTable(db, ifExists);
        BaoYaYaLiResbeanDao.dropTable(db, ifExists);
        Step9ResbeanDao.dropTable(db, ifExists);
    }

    /**
     * WARNING: Drops all table on Upgrade! Use only during development.
     * Convenience method using a {@link DevOpenHelper}.
     */
    public static DaoSession newDevSession(Context context, String name) {
        Database db = new DevOpenHelper(context, name).getWritableDb();
        DaoMaster daoMaster = new DaoMaster(db);
        return daoMaster.newSession();
    }

    public DaoMaster(SQLiteDatabase db) {
        this(new StandardDatabase(db));
    }

    public DaoMaster(Database db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(HeadInfoResbeanDao.class);
        registerDaoClass(ProblemItemResbeanDao.class);
        registerDaoClass(ProblemResbeanDao.class);
        registerDaoClass(ShiMuResbeanDao.class);
        registerDaoClass(Step1ResbeanDao.class);
        registerDaoClass(Step10ResbeanDao.class);
        registerDaoClass(YaLiTestResbeanDao.class);
        registerDaoClass(Step11ResbeanDao.class);
        registerDaoClass(Step12ResBeanDao.class);
        registerDaoClass(Step13ResbeanDao.class);
        registerDaoClass(Step2ResbeanDao.class);
        registerDaoClass(FixSideResbeanDao.class);
        registerDaoClass(MoveSideResbeanDao.class);
        registerDaoClass(SlideResbeanDao.class);
        registerDaoClass(Step3MuResBeanDao.class);
        registerDaoClass(Step3ShuiLuDateDao.class);
        registerDaoClass(KongZhiDianResbeanDao.class);
        registerDaoClass(Step4ResbeanDao.class);
        registerDaoClass(ZhuLiuDaoResbeanDao.class);
        registerDaoClass(Step5ResbeanDao.class);
        registerDaoClass(Step6ResbeanDao.class);
        registerDaoClass(Step7ResbeanDao.class);
        registerDaoClass(ZhuSuResbeanDao.class);
        registerDaoClass(ChongTianPingHengResbeanDao.class);
        registerDaoClass(Step8ResbeanDao.class);
        registerDaoClass(BaoYaTimeResbeanDao.class);
        registerDaoClass(BaoYaYaLiResbeanDao.class);
        registerDaoClass(Step9ResbeanDao.class);
    }

    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }

    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }

    /**
     * Calls {@link #createAllTables(Database, boolean)} in {@link #onCreate(Database)} -
     */
    public static abstract class OpenHelper extends DatabaseOpenHelper {
        public OpenHelper(Context context, String name) {
            super(context, name, SCHEMA_VERSION);
        }

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(Database db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }

    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name) {
            super(context, name);
        }

        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(Database db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

}
