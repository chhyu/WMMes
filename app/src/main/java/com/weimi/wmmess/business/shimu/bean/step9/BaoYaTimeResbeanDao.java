package com.weimi.wmmess.business.shimu.bean.step9;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.weimi.wmmess.business.shimu.bean.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BAO_YA_TIME_RESBEAN".
*/
public class BaoYaTimeResbeanDao extends AbstractDao<BaoYaTimeResbean, Long> {

    public static final String TABLENAME = "BAO_YA_TIME_RESBEAN";

    /**
     * Properties of entity BaoYaTimeResbean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BaoYaTimeResbeanId = new Property(1, Long.class, "baoYaTimeResbeanId", false, "baoYaTimeResbeanId");
        public final static Property Time = new Property(2, String.class, "time", false, "TIME");
        public final static Property TimeOne = new Property(3, String.class, "timeOne", false, "TIME_ONE");
        public final static Property TimeTwo = new Property(4, String.class, "timeTwo", false, "TIME_TWO");
        public final static Property TimeThree = new Property(5, String.class, "timeThree", false, "TIME_THREE");
        public final static Property TimeAverageValue = new Property(6, String.class, "timeAverageValue", false, "TIME_AVERAGE_VALUE");
        public final static Property TimeBeizhu = new Property(7, String.class, "timeBeizhu", false, "TIME_BEIZHU");
    }

    private Query<BaoYaTimeResbean> step9Resbean_BaoYaTimeResbeansQuery;

    public BaoYaTimeResbeanDao(DaoConfig config) {
        super(config);
    }
    
    public BaoYaTimeResbeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BAO_YA_TIME_RESBEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"baoYaTimeResbeanId\" INTEGER," + // 1: baoYaTimeResbeanId
                "\"TIME\" TEXT," + // 2: time
                "\"TIME_ONE\" TEXT," + // 3: timeOne
                "\"TIME_TWO\" TEXT," + // 4: timeTwo
                "\"TIME_THREE\" TEXT," + // 5: timeThree
                "\"TIME_AVERAGE_VALUE\" TEXT," + // 6: timeAverageValue
                "\"TIME_BEIZHU\" TEXT);"); // 7: timeBeizhu
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BAO_YA_TIME_RESBEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BaoYaTimeResbean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long baoYaTimeResbeanId = entity.getBaoYaTimeResbeanId();
        if (baoYaTimeResbeanId != null) {
            stmt.bindLong(2, baoYaTimeResbeanId);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(3, time);
        }
 
        String timeOne = entity.getTimeOne();
        if (timeOne != null) {
            stmt.bindString(4, timeOne);
        }
 
        String timeTwo = entity.getTimeTwo();
        if (timeTwo != null) {
            stmt.bindString(5, timeTwo);
        }
 
        String timeThree = entity.getTimeThree();
        if (timeThree != null) {
            stmt.bindString(6, timeThree);
        }
 
        String timeAverageValue = entity.getTimeAverageValue();
        if (timeAverageValue != null) {
            stmt.bindString(7, timeAverageValue);
        }
 
        String timeBeizhu = entity.getTimeBeizhu();
        if (timeBeizhu != null) {
            stmt.bindString(8, timeBeizhu);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BaoYaTimeResbean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long baoYaTimeResbeanId = entity.getBaoYaTimeResbeanId();
        if (baoYaTimeResbeanId != null) {
            stmt.bindLong(2, baoYaTimeResbeanId);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(3, time);
        }
 
        String timeOne = entity.getTimeOne();
        if (timeOne != null) {
            stmt.bindString(4, timeOne);
        }
 
        String timeTwo = entity.getTimeTwo();
        if (timeTwo != null) {
            stmt.bindString(5, timeTwo);
        }
 
        String timeThree = entity.getTimeThree();
        if (timeThree != null) {
            stmt.bindString(6, timeThree);
        }
 
        String timeAverageValue = entity.getTimeAverageValue();
        if (timeAverageValue != null) {
            stmt.bindString(7, timeAverageValue);
        }
 
        String timeBeizhu = entity.getTimeBeizhu();
        if (timeBeizhu != null) {
            stmt.bindString(8, timeBeizhu);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BaoYaTimeResbean readEntity(Cursor cursor, int offset) {
        BaoYaTimeResbean entity = new BaoYaTimeResbean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // baoYaTimeResbeanId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // time
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // timeOne
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // timeTwo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // timeThree
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // timeAverageValue
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // timeBeizhu
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BaoYaTimeResbean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBaoYaTimeResbeanId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTimeOne(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTimeTwo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTimeThree(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTimeAverageValue(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTimeBeizhu(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BaoYaTimeResbean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BaoYaTimeResbean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BaoYaTimeResbean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "baoYaTimeResbeans" to-many relationship of Step9Resbean. */
    public List<BaoYaTimeResbean> _queryStep9Resbean_BaoYaTimeResbeans(Long baoYaTimeResbeanId) {
        synchronized (this) {
            if (step9Resbean_BaoYaTimeResbeansQuery == null) {
                QueryBuilder<BaoYaTimeResbean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.BaoYaTimeResbeanId.eq(null));
                step9Resbean_BaoYaTimeResbeansQuery = queryBuilder.build();
            }
        }
        Query<BaoYaTimeResbean> query = step9Resbean_BaoYaTimeResbeansQuery.forCurrentThread();
        query.setParameter(0, baoYaTimeResbeanId);
        return query.list();
    }

}
